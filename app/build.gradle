plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.ffmpegdemo"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"
       // ndkVersion '21.4.7075529'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // 指定CPU架构 Cmake中的本地库，例如：libnative-lib.so
        externalNativeBuild {
            cmake {
                // cppFlags "" // 这样写，默认是四大CPU架构平台
                // 指定CPU架构是armeabi-v7a ,arm64-v8a
                abiFilters "armeabi-v7a","arm64-v8a"
            }
        }
        //  指定打包时的CPU的架构
        // 下面代码不写，默认是四大CPU架构平台
        ndk {
            // 指定CPU架构是armeabi-v7a,arm64-v8a
            abiFilters "armeabi-v7a","arm64-v8a"
        }
        // AS gradle:3.x 旧版本没有任何问题
        // 新版本的才有 gradle:4.2.0，自动去寻找jniLibs文件夹 处理和优化 ，旧版本没有任何问题
         /* 编译报错如下:
        2 files found with path 'jniLibs/armeabi-v7a/libavutil.so'.
        If you are using lib and CMake IMPORTED targets, see
        https://developer.android.com/r/tools/jniLibs-vs-imported-targets
        */
        // 解决方案如下：
        // https://blog.csdn.net/qq_33750826/article/details/107518573
        // 在模块的build.gradle中设置第三方库的加载路径：
        // 因为在gradle plugln 4.0开始，无需指定第三方库加载路径，gradle自动会帮助我们寻找src/main/jniLibs文件夹 处理和优化
      //  sourceSets.main.jniLibs.srcDirs = ['libs']
        // sourceSets.main.jniLibs.srcDirs = ['src/main/jniLibs']
        //最后总结一波：
        //1、在gradle plugln 4.0及以上,
      /*  1.如果没有CmakeLists.txt文件,系统也没有指定第三方库加载路径,gradle自动会帮助我们寻找src/main/jniLibs文件夹，找到文件夹下的相应abi下的.a或者.so去加载和优化，相当于默认设置了 sourceSets.main.lib.srcDirs = ['src/main/jniLibs']
          2.如果有CmakeLists.txt文件,并且CmakeLists.txt里面通过下面两句话：
            add_library(avutil SHARED IMPORTED)
            set_target_properties(avutil PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/../jniLibs/${CMAKE_ANDROID_ARCH_ABI}/libavutil.so)
         设置了src/main/jniLibs路径去加载第三方库，会报：
           2 files found with path 'lib/armeabi-v7a/libavutil.so'
           If you are using lib and CMake IMPORTED targets, see
           https://developer.android.com/r/tools/jniLibs-vs-imported-targets
           这个错误
           因为系统默认设置了 sourceSets.main.jniLibs.srcDirs = ['src/main/jniLibs']，会找到文件夹下的相应abi下的.a或者.so去加载和优化
           而这里的CmakeLists.txt又设置了'src/main/jniLibs'这个路径去加载.a或者.so会重复加载而报错。
           解决办法为：
           1.如果在CmakeLists.txt里面设置了jniLibs加载三方库：
            add_library(avutil SHARED IMPORTED)
            set_target_properties(avutil PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/../jniLibs/${CMAKE_ANDROID_ARCH_ABI}/libavutil.so)
           则在build.gradle中修改第三方库的加载路径为app/libs,sourceSets.main.jniLibs.srcDirs = ['libs'](默认设置了 sourceSets.main.lib.srcDirs = ['src/main/jniLibs'])
           2.如果在CmakeLists.txt里面设置jniLibs以外的任意目录如xxx目录：
            add_library(avutil SHARED IMPORTED)
            set_target_properties(avutil PROPERTIES IMPORTED_LOCATION ${CMAKE_SOURCE_DIR}/../xxx/${CMAKE_ANDROID_ARCH_ABI}/libavutil.so)
           加载三方库，
           那么build.gradle不用修改,也就是默认sourceSets.main.jniLibs.srcDirs = ['src/main/jniLibs']
         2、gradle plugln 4.0以下版本没有任何问题
         */

        //sourceSets.main.jniLibs.srcDirs = ['libs']这样写也可以
     /*   sourceSets {
            main {
                jniLibs.srcDirs = ['libs']
            }
        }*/

    }

    //sourceSets.main.jniLibs.srcDirs = ['libs']放这里也可以
   /* sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }*/

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    //kotlin支持
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}